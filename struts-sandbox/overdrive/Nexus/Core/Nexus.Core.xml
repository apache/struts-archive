<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nexus.Core</name>
    </assembly>
    <members>
        <member name="T:WQD.Core.Controls.FindArgs">
            <summary>
            Provide an EventArgs type to interace with FindControls
            that can be read or bound via an IDictionary object.
            </summary>
            
        </member>
        <member name="F:WQD.Core.Controls.FindArgs.OldArgs">
            <summary>
            A reference to the original arguments for an event, if any.
            </summary>
            
        </member>
        <member name="F:WQD.Core.Controls.FindArgs.Criteria">
            <summary>
            Expose our dictionary instance.
            </summary>
            
        </member>
        <member name="M:WQD.Core.Controls.FindArgs.#ctor(System.Collections.IDictionary)">
            <summary>
            Create this instance using the given dictionary.
            </summary>
            
        </member>
        <member name="M:WQD.Core.Controls.FindArgs.#ctor">
            <summary>
            Create a new instance with empty fields.
            </summary>
            
        </member>
        <member name="M:WQD.Core.Controls.FindArgs.#ctor(System.EventArgs)">
            <summary>
            Create a new instance, setting the old event arguments.
            </summary>
            <param name="oldArgs">Old Event arguments</param>
            
        </member>
        <member name="T:Nexus.Core.Helpers.IViewHelper">
            <summary>
            Provide methods for running a business command and handling the result.
            </summary>
            <remarks><p>
            IViewHelper is a facade for use by a code-behind to simplify access 
            to the IRequestContext and IRequestCommand. 
            </p><p>
            The helper may also work with the catalog to act as a 
            "front controller" by ensuring routine tasks are carried out.
            These tasks can include input validation, data conversion, 
            text formatting, command logging, and so forth.
            </p></remarks>
            
        </member>
        <member name="M:Nexus.Core.Helpers.IViewHelper.Execute">
            <summary>
            Perform the Command associated with this Helper.
            </summary>
            
        </member>
        <member name="M:Nexus.Core.Helpers.IViewHelper.Read(System.Collections.IDictionary,System.Boolean)">
            <summary>
            Read input into the Criteria from a given Dictionary.
            </summary>
            <param name="criteria">Attributes to add to Critiera</param>
            <param name="nullIfEmpty">Set attributes for empty strings to null</param>
            
        </member>
        <member name="M:Nexus.Core.Helpers.IViewHelper.AlertsFor(System.String)">
            <summary>
            Return the Alerts for the specifiied ID, 
            formatted for display by a UI control.
            </summary>
            <remarks>
            If messages are localized or customized, 
            the helper will return correct version for the user.
            UI specific implementation may markup the errors as needed.
            </remarks>
            
        </member>
        <member name="M:Nexus.Core.Helpers.IViewHelper.HintsFor(System.String)">
            <summary>
            Return the Hints for the specifiied ID, 
            formatted for display by a UI control.
            </summary>
            <remarks>
            If messages are localized or customized, 
            the helper will return correct version for the user.
            UI specific implementation may markup the errors as needed.
            </remarks>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.Criteria">
            <summary>
            Store input and output values.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.Profile">
            <summary>
            User profile, which includes user ID and Locale.
            </summary>
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.Outcome">
            <summary>
            Access result of operation as an IList.
            </summary>
            <remarks><p>
            If the Helper is designed to return a List result, 
            this method saves casting the outcome.
            If the Helper is not designed to return the result as a IList, 
            this method returns a single-value result as a one-entry list.
            </p><p>
            Note this since this is the Helper Outcome, 
            the result is relative to the Criteria, 
            rather than the main Context.
            </p></remarks>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.Alerts">
            <summary>
            Record a list of alert (or error) messages, 
            keyed by the field causing the message, 
            or to a magic global key.
            </summary>
            <remarks>
            When recalling Alerts, by default include the Fault.
            </remarks>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.AlertsText">
            <summary>
            Return the Alerts, including any Fault, formatted for display by a UI control.
            </summary>
            <remarks>
            If messages are localized or customized, 
            the helper will return correct version for the user.
            UI specific implementation may markup the errors as needed.
            </remarks>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.HasAlerts">
            <summary>
            Indicate if alerts are queued.
            </summary>
            <returns>True if alerts are queued.</returns>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.Fault">
            <summary>
            Record an Exception, if thrown.
            </summary>
            <remarks>
            By default, the Fault will be included in the list of Alerts.
            </remarks>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.HasFault">
            <summary>
            Indicate whether an Exception is caught.
            </summary>
            <returns>True if an Exception is caught.</returns>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.IsNominal">
            <summary>
            Indicate if there are no alerts or fault pending.
            </summary>
            <returns>True if all is well.</returns>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.Hints">
            <summary>
            Record a list of hint (or advisory) messages, 
            keyed by a field or other identifier, 
            or to a magic global key.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.HasHints">
            <summary>
            Indicate if Hints are queued.
            </summary>
            <returns>True if Hints are queued.</returns>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.HintsText">
            <summary>
            Return Hints formatted for display by a UI control.
            </summary>
            <remarks>
            If messages are localized or customized, 
            the helper will return correct version for the user.
            UI specific implementatiosn may markup the messages as needed.
            </remarks>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.FieldTable">
            <summary>
            Provide the Field Table for this Helper.
            </summary>
            <remarks><p>
            The default implementation uses the Catalog to inject the global 
            Field Table reference. 
            The Context, and members with access to a Context, 
            can use the FieldTable to validate and format values, 
            and even to create controls that display values.
            </p></remarks>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.Command">
            <summary>
            Provide the command (or chain of commands) for this helper
            </summary>
            <remarks><p>
            Setting the Command also sets the internal Context for the command.
            </p></remarks>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.FieldSet">
            <summary>
            Provide a set of IFieldContext definitions to be used with this helper. 
            </summary>
            <remarks><p>
            The FieldSet is usually set by dependency injection.
            Some helpers generate DataGrids or DataForms based on the 
            FieldDefinitions 
            </p></remarks>
            
        </member>
        <member name="P:Nexus.Core.Helpers.IViewHelper.Catalog">
            <summary>
            Provide the catalog for this helper, 
            usually set by dependency injection.
            </summary>
            
        </member>
        <member name="T:Nexus.Core.Helpers.ViewArgs">
            <summary>
            EventArgs type with a IViewHelper property.
            </summary>
        </member>
        <member name="M:Nexus.Core.Helpers.ViewArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nexus.Core.Helpers.ViewArgs.#ctor(Nexus.Core.Helpers.IViewHelper)">
            <summary>
            Convenience constructor to set helper. 
            </summary>
            <param name="helper"></param>
        </member>
        <member name="P:Nexus.Core.Helpers.ViewArgs.Helper">
            <summary>
            Helper instance to encapsulate.
            </summary>
        </member>
        <member name="T:Nexus.Core.Helpers.ViewHelper">
            <summary>
            Standard implementation of IViewHelper.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Helpers.ViewHelper.LIST_SUFFIX">
            <summary>
            Default setting for ListSuffix ["_list"].
            </summary>
        </member>
        <member name="F:Nexus.Core.Helpers.ViewHelper.NULL_IF_EMPTY">
            <summary>
            Default setting for NullIfEmpty [true].
            </summary>
        </member>
        <member name="F:Nexus.Core.Helpers.ViewHelper.PREFIX">
            <summary>
            Default setting for Prefix [""].
            </summary>
        </member>
        <member name="F:Nexus.Core.Helpers.ViewHelper.SELECT_ITEM_PROMPT">
            <summary>
            Default setting for SelectItemPrompt ["--v--"].
            </summary>
        </member>
        <member name="P:Nexus.Core.Helpers.ViewHelper.Catalog">
            <summary>
            Provide the application object catalog for this Helper.
            </summary>
            <remarks>
            The Catalog is usually set through dependency injection. 
            The Catalog and Command must be set before calling other methods.
            </remarks>
            
        </member>
        <member name="P:Nexus.Core.Helpers.ViewHelper.Command">
            <summary>
            Provide the command for this Helper.
            </summary>
            <remarks>
            The Command is usually set through dependency injection. 
            The Catalog and Command must be set before calling other methods.
            </remarks>
            
        </member>
        <member name="P:Nexus.Core.Helpers.ViewHelper.Context">
            <summary>
            Provide the all-important Context for this Helper.
            </summary>
            <remarks>
            The Context is obtained through reference to the Catalog and Command.
            All other properties and methods of the Helper refer to the Context, 
            making Context the cornerstone property.
            </remarks>
            
        </member>
        <member name="T:Nexus.Core.Profile.IProfile">
            <summary>
            Record user settings.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Profile.IProfile.UserId">
            <summary>
            Record the User ID.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Profile.IProfile.UserLocale">
            <summary>
            Record the User Locale.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Profile.IProfile.Criteria">
            <summary>
            Record other default settings.
            </summary>
            
        </member>
        <member name="T:Nexus.Core.Profile.UserIdentity">
            <summary>
            Implement IIdentity to capture user's login name.
            </summary>
            <remarks><p>
            An identity object represents the user on whose behalf the code is running).
            </p><p>
            For this to work, we must update the Web.config and the server settings. 
            </p><p>
            Web.config: &lt;authentication mode="Windows" /&gt; &lt;identity impersonate="true"/&gt;
            </p><p>
            IIS Admin: Disable Anon Access on the Directory Security tab.
            </p></remarks>
        </member>
        <member name="M:Nexus.Core.Profile.UserIdentity.#ctor">
            <summary>
            Instantiate with zero parameters.
            </summary>
        </member>
        <member name="M:Nexus.Core.Profile.UserIdentity.#ctor(System.Security.Principal.IIdentity)">
            <summary>
            Instantiate with an IIdentity. 
            </summary>
            <remarks>
            Essentially, create a shallow copy of the given Identity.
            </remarks>
            <param name="id">Identity to copy</param>
        </member>
        <member name="M:Nexus.Core.Profile.UserIdentity.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Instantiate from passed values. 
            </summary>
            <param name="name">Value for user's name</param>
            <param name="authenticationType">Value for AuthenticationType</param>
            <param name="isAuthenticated">Value for IsAuthenticated</param>
        </member>
        <member name="T:Nexus.Core.Profile.UserPrincipal">
            <summary>
            Implement IPrincipal to capture the user's login name.
            </summary>
            <remarks><p>
            IPrincipal - A principal object represents the security context of the 
            user on whose behalf the code is running, including that user's identity 
            (IIdentity) and any roles to which they belong.
            </p></remarks>
        </member>
        <member name="F:Nexus.Core.Profile.UserPrincipal._Roles">
            <summary>
            Field for Roles property.
            </summary>
        </member>
        <member name="M:Nexus.Core.Profile.UserPrincipal.#ctor">
            <summary>
            Instantiate default NexusPrincipal with empty NexusIdentity.
            </summary>
        </member>
        <member name="M:Nexus.Core.Profile.UserPrincipal.#ctor(System.Security.Principal.IIdentity)">
            <summary>
            Instantiate from an IIdentity.
            </summary>
            <remarks>
            The Roles for this principal will follow 
            those set by the Roles property, regardless of the 
            Identity or Authentication Type.
            </remarks>
            <param name="id">Value for user name</param>
        </member>
        <member name="P:Nexus.Core.Profile.UserPrincipal.Roles">
            <summary>
            The roles for this principal representated as an array.
            </summary>
        </member>
        <member name="T:Nexus.Core.Profile.UserProfile">
            <summary>
            Represent a user.
            </summary>
            <remarks><p>
            The UserProfile includes a standard Principal object for 
            authentification and authorization. 
            Any user-related properties may be added here, along with 
            convenience methods for determining roles, such as 
            IsEngineer, IsManager, et al.
            </p></remarks>
        </member>
        <member name="F:Nexus.Core.Profile.UserProfile.USER_PROFILE">
            <summary>
            Identify attribute key for storing a user profile.
            </summary>
        </member>
        <member name="F:Nexus.Core.Profile.UserProfile.USER_ID">
            <summary>
            Identify attribute key for storing a user ID;.
            </summary>
        </member>
        <member name="F:Nexus.Core.Profile.UserProfile.USER_ID_SEPARATOR">
            <summary>
            Identify the character separating a "machine name" from a "user id".
            </summary>
        </member>
        <member name="M:Nexus.Core.Profile.UserProfile.TrimMachineName(System.String)">
            <summary>
            Trim any machine name reference from Principal Name. 
            </summary>
            <param name="name">A Identity Name that may contain a machine name reference</param>
            <returns>Identity name with machine name removed</returns>
        </member>
        <member name="F:Nexus.Core.Profile.UserProfile._UserLocale">
            <summary>
            Provide a field for UserLocale property.
            </summary>
        </member>
        <member name="F:Nexus.Core.Profile.UserProfile._Criteria">
            <summary>
            Provide a field for Criteria property.
            </summary>
            
        </member>
        <member name="M:Nexus.Core.Profile.UserProfile.#ctor">
            <summary>
            Instantiate a default profile.
            </summary>
        </member>
        <member name="M:Nexus.Core.Profile.UserProfile.#ctor(System.Security.Principal.IPrincipal)">
            <summary>
            Instantiate from an IPrincipal.
            </summary>
            <param name="principal">Principal for this profile.</param>
        </member>
        <member name="M:Nexus.Core.Profile.UserProfile.#ctor(System.Security.Principal.IIdentity)">
            <summary>
            Instantiate from an IIdentity.
            </summary>
            <param name="id">Identity to copy for this profile.</param>
        </member>
        <member name="P:Nexus.Core.Profile.UserProfile.Principal">
            <summary>
            Provide the Principal object for this user.
            </summary>
            <remarks><p>
            Usually, this is a UserPrincipal, 
            but any IPrincipal instance could be used.
            </p></remarks>
        </member>
        <member name="P:Nexus.Core.Profile.UserProfile.UserId">
            <summary>
            Record the user id portion of the Identity Name.
            </summary>
            <remarks><p>
            The UserId can be used to relate staff records to user logins.
            </p></remarks>
        </member>
        <member name="T:Nexus.Core.Tables.FieldContext">
            <summary>
            Concrete IFieldContext implementation.
            </summary>
        </member>
        <member name="T:Nexus.Core.Tables.IFieldContext">
            <summary>
            Provide properties common to controls, 
            including Alert, ControlType, and Processor. 
            </summary>
            <remark><p>
            The FieldContext entries are made available through a FieldTable.
            The FieldContext members follow XForms terminology. 
            </p><p>
            XForms [http://www.w3.org/MarkUp/Forms/]. 
            XForms Controls [http://www.orbeon.com/ops/doc/processors-xforms].
            XPath 2.0 for .NET [http://sourceforge.net/projects/saxondotnet/].
            </p><p>
            To globalize an application, 
            utilize a IFieldContext implementation that supports localization. 
            A localized implementation can access a message resource to obtain text and messages, 
            rather than a simple property. 
            Localized implementations should also dissallow setting the text properties, 
            since those values would be provided through a message resource. 
            </p><p>
            For a localized implementation, see Nexus.Core.Extras.Spring.FieldContext.
            </p></remark>
            
        </member>
        <member name="P:Nexus.Core.Tables.IFieldContext.Alert">
            <summary>
            Provide a message to display when input validation fails.
            </summary>
            <remarks>
            If the Processor also provides an Alert, 
            the Processor's Alert should be returned instead. 
            </remarks>
            
        </member>
        <member name="P:Nexus.Core.Tables.IFieldContext.ControlTypeName">
            <summary>
            Identify name of the default Control Type.
            </summary>
            <remarks><p>
            Standard control types are: input, secret, textarea, select1, select, submit, upload.
            </p><p>
            XForms distinguishes between Lists, Radio Buttons, and CheckBoxes through additional 
            parameters. For now, all three can be identified as select1 or select.
            </p></remarks>
            
        </member>
        <member name="P:Nexus.Core.Tables.IFieldContext.Help">
            <summary>
            Provide text to display for a context-sensitive help screen.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Tables.IFieldContext.Hint">
            <summary>
            Record an onscreen or hover hint.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Tables.IFieldContext.ID">
            <summary>
            Identify this field with a unique name.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Tables.IFieldContext.Label">
            <summary>
            Provide a label for the control.
            </summary>
            <remarks><p>
            If the Label is null, the ID should  be returned instead. 
            </p></remarks>
            
        </member>
        <member name="P:Nexus.Core.Tables.IFieldContext.Processor">
            <summary>
            Provide the processor for this field context.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Tables.IFieldContext.Required">
            <summary>
            Provide a message to display when required input is missing.
            </summary>
            
        </member>
        <member name="T:Nexus.Core.Tables.FieldTable">
            <summary>
            Implement IFieldTable.
            </summary>
            <remarks><p>
            Validator
            * Needs configurable nullvalue support
            ** String, nullValue=""
            ** Double, nullValue=0.0"
            ** DataType, allowNull
            * If they give us something, and it fails conversion, then validation fails. 
            * If they give us null or an empty string, and the property has a nullValue, then the nullValue is used. 
            * If they give us null or an empty string, or the nullValue, and the property is required, then validation fails. 
            </p></remarks>
        </member>
        <member name="T:Nexus.Core.Tables.IFieldTable">
            <summary>
            Inventory of fields and processors used by the application.
            </summary>
            
        </member>
        <member name="M:Nexus.Core.Tables.IFieldTable.NewFieldContext(System.String)">
            <summary>
            Factory method to create a stub context 
            when field is required and Strict is false.
            </summary>
            <remarks><p>
            The IFieldContext instance should provide a default for Required.
            </p></remarks>
            <param name="id">The fieldname</param>
            <returns>New default context for ID</returns>
        </member>
        <member name="M:Nexus.Core.Tables.IFieldTable.GetFieldContext(System.String)">
            <summary>
            Obtain the FieldContext for the given ID, observing Strict setting.
            </summary>
            <param name="id">FieldContext ID</param>
            <returns>FieldContext for ID</returns>
            
        </member>
        <member name="M:Nexus.Core.Tables.IFieldTable.Alert(System.String)">
            <summary>
            Provide the Alert message for a given field id.
            </summary>
            <param name="id">FieldContext ID</param>
            <returns>Alert message for FieldContext ID</returns>
            
        </member>
        <member name="M:Nexus.Core.Tables.IFieldTable.Label(System.String)">
            <summary>
            Provide the Label message for a given field id.
            </summary>
            <param name="id">FieldContext ID</param>
            <returns>Alert message for FieldContext ID</returns>
            
        </member>
        <member name="M:Nexus.Core.Tables.IFieldTable.Required(System.String)">
            <summary>
            Provide the Required message for a given field id.
            </summary>
            <param name="id">FieldContext ID</param>
            <returns>Required message for FieldContext ID</returns>
            
        </member>
        <member name="P:Nexus.Core.Tables.IFieldTable.Strict">
            <summary>
            Indicate whether this FieldTable must include all fields, 
            including strings fields [FALSE].
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Tables.IFieldTable.AddFieldContext">
            <summary>
            Add a field to the set. 
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Tables.IFieldTable.AddFieldContexts">
            <summary>
            Add a list of fields to the set.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Tables.IFieldTable.AddProcessor">
            <summary>
            Add a Processor to the set.
            </summary>
        </member>
        <member name="P:Nexus.Core.Tables.IFieldTable.AddProcessors">
            <summary>
            Add a list of Processors to the set.
            </summary>
        </member>
        <member name="M:Nexus.Core.Tables.FieldTable.#ctor">
            <summary>
            Create instance with zero paramters.
            </summary>
        </member>
        <member name="P:Nexus.Core.Tables.FieldTable.Field">
            <summary>
            Internal storage for the FieldContexts.
            </summary>
        </member>
        <member name="P:Nexus.Core.Tables.FieldTable.Processor">
            <summary>
            Internal storage for the Processors.
            </summary>
        </member>
        <member name="T:Nexus.Core.Validators.ClearContext">
            <summary>
            Clear from the Context any keys present in the Criteria, 
            so that, if the context is re-used, values from a prior request do not linger.
            </summary>
            <remarks><p>
            Once the values are output from the Context to the Criteria, 
            they can be safely removed from the Context. 
            </p><p>This command can be used as part of a post-opt chain to ensure that 
            Context values are not retained if a Context object is used for multiple 
            business requests. 
            </p></remarks>
        </member>
        <member name="T:Nexus.Core.RequestCommand">
            <summary>
            Implement IRequestCommand, leaving RequestExecute abstract.
            </summary>
            
        </member>
        <member name="T:Nexus.Core.IRequestCommand">
            <summary>
            Extend ICommand to utilize an IRequestContext [OVR-9]
            </summary>
            <remarks><p>
            Rather than have each command cast its context to an 
            IRequestContext, 
            provide a IRequestCommand with an alternative signature. 
            </p></remarks>
            
        </member>
        <member name="M:Nexus.Core.IRequestCommand.NewContext">
            <summary>
            Factory method to provide an empty context that can be used 
            with the Command instance.
            </summary>
            <returns>Context instance with Command ID set.</returns>
            
        </member>
        <member name="M:Nexus.Core.IRequestCommand.RequestExecute(Nexus.Core.IRequestContext)">
            <summary>
            Invoke the business operation.
            </summary>
            <remarks><p>
            Expected to be called from Execute as a casting convenience.
            </p></remarks>
            <param name="context">Context to process.</param>
            
        </member>
        <member name="P:Nexus.Core.IRequestCommand.ID">
            <summary>
            An identifier for this Command. 
            </summary>
            <remarks>
            Corresponds to the Command property of IHelperContext. 
            </remarks>
            <returns>An identifier for this Command.</returns>
            
        </member>
        <member name="P:Nexus.Core.IRequestCommand.QueryID">
            <summary>
            An identifier for a Query associated with this Command (if any).
            </summary>
            <remarks>
            If Query is not set, then ID is returned instead. 
            (The default QueryID is the command ID.) 
            </remarks>
            <returns>An identifier for this Command.</returns>
        </member>
        <member name="P:Nexus.Core.IRequestCommand.RequiredIDs">
            <summary>
            Field IDs required by this Command.
            </summary>
            <remarks><p>
            If requisite fields are not present in the main Context, 
            appropriate errors should be posted to the Errors property, 
            so that the client can correct the oversight and resubmit the request.
            </p><p>
            The RelatedIDs property may be used by the command itself, 
            or by a collaborating "conversion" command, 
            to confirm that related fields, when present, are in the expected format. 
            </p><p>
            The RelatedIDs property may be used by the command itself, 
            or by a collaborating "validation" command, 
            to confirm that related fields, when present, are in the expected format. 
            </p></remarks>
        </member>
        <member name="P:Nexus.Core.IRequestCommand.AddRequiredIDs">
             <summary>
             Add a IList of IDs to the list of {@link RequiredIds}.
            </summary>
        </member>
        <member name="P:Nexus.Core.IRequestCommand.RelatedIDs">
            <summary>
            Record FieldContext IDs related to this Command, including any RequiredIDs.
            </summary>
            <remarks><p>
            If a Field ID is not specified as a  RelatedID or a RequiredID, 
            than it may not be passed from the Criteria to the main Context, 
            and so will not be available to the Command. 
            </p><p>
            As the field is passed from the Fieldstate to the main Context, 
            it may also be converted to the appropriate DataType or string format. 
            A collaborating Command may reference the FieldTable in a INexusContext 
            to ascertain the expected type or format for a value and 
            to obtain the appropriate error messages for each field. 
            </p><p>
            The RelatedIDs property may be used by the command itself, 
            or by a collaborating "conversion" command, 
            to confirm that related fields, when present, are in the expected format. 
            </p><p>
            Since posting errors and messages is a specialized concern, 
            it is recommended that collaborating Commands handle validation and confirmation.
            </p><p>
            A collaborating Command may reference the FieldTable in a INexusContext 
            to ascertain the expected format for a value and 
            to obtain the appropriate error messages for each field. 
            </p></remarks>
        </member>
        <member name="P:Nexus.Core.IRequestCommand.AddRelatedIDs">
             <summary>
             Add a IList of IDs to the list of {@link RelatedIds}.
            </summary>
        </member>
        <member name="P:Nexus.Core.IRequestCommand.RuntimeIDs">
            <summary>
            Record Field IDs provided during the processing of a Chain. 
            </summary>
            <remarks><p>
            When Commands are chained, the output from one Command may be  used 
            as input for another Command. If a collaborating Command is 
            validating the Criteria for required input, prior to processing, 
            then Runtime FieldIDs may be excluded from the set of RequiredIDs. 
            </p><p>
            The RuntimeIDs are expected to be set on a Chain rather than an individual 
            Command. The property is a member of the INexusCommand interface so that 
            Command and Chains can observe the substitution principle.
            </p></remarks>
        </member>
        <member name="P:Nexus.Core.IRequestCommand.AddRuntimeIDs">
             <summary>
             Add a IList of IDs to the list of {@link RuntimeIds}.
            </summary>
        </member>
        <member name="F:Nexus.Core.RequestCommand.STOP">
            <summary>
            Execute should return STOP if problem occurs, 
            so that a Chain can exit processing on error. 
            </summary>
            
        </member>
        <member name="F:Nexus.Core.RequestCommand.CONTINUE">
            <summary>
            Return CONTINUE if another Command could run.
            </summary>
            
        </member>
        <member name="M:Nexus.Core.Validators.ClearContext.RequestExecute(Nexus.Core.IRequestContext)">
            <summary>
            Clear from the Context any keys present in the Criteria.
            </summary>
            <param name="context">Context after attributes have been output to Criteria</param>
            <returns>CONTINUE</returns>
        </member>
        <member name="T:Nexus.Core.Validators.Processor">
            <summary>
            Implement common properties.
            </summary>
        </member>
        <member name="T:Nexus.Core.Validators.IProcessor">
            <summary>
            Convert or Format a standard or custom DataType.
            </summary>
        </member>
        <member name="T:Nexus.Core.Validators.ConvertInput">
            <summary>
            Convert related fields from Criteria to the main context, 
            adding an Alert message to Errors if a conversion fails.
            </summary>
        </member>
        <member name="T:Nexus.Core.Validators.ProcessorCommand">
            <summary>
            Provide a base class to use when implementating Validators. 
            </summary>
            <remarks>
            Subclasses must provide a NexusExecute method.
            </remarks>
        </member>
        <member name="T:Nexus.Core.Validators.IProcessorCommand">
            <summary>
            Transform values from one data type or format to another. [OVR-13].
            </summary>
        </member>
        <member name="M:Nexus.Core.Validators.IProcessorCommand.ExecuteProcess(Nexus.Core.Validators.IProcessorContext)">
            <summary>
            Transform the value indicated by the context FieldKey, if present.
            </summary>
            <param name="context">The context we are processing</param>
            <returns>True if nominal</returns>
        </member>
        <member name="M:Nexus.Core.Validators.IProcessorCommand.ExecuteConvert(Nexus.Core.Validators.IProcessorContext)">
            <summary>
            Convert a field value, utlitizing the field table and processor.
            </summary>
            <param name="context">The context we are processing</param>
            <returns>True if nominal</returns>
        </member>
        <member name="M:Nexus.Core.Validators.IProcessorCommand.ExecuteFormat(Nexus.Core.Validators.IProcessorContext)">
            <summary>
            Format a field value, utlitizing the field table and processor.
            </summary>
            <param name="context">The context we are processing</param>
            <returns>True if nominal</returns>
        </member>
        <member name="P:Nexus.Core.Validators.IProcessorCommand.Required">
            <summary>
            Provide a message template to use when a required field is missing.
            </summary>
        </member>
        <member name="M:Nexus.Core.Validators.ProcessorCommand.ConvertInput(Nexus.Core.Validators.IProcessorContext)">
            <summary>
            Convert input for fields that do not have a Processor.
            </summary>
            <remarks>
            The default behavior is to pass through the objects, verbatim.
            </remarks>
            <param name="context">The IProcessorContext</param>
        </member>
        <member name="M:Nexus.Core.Validators.ProcessorCommand.FormatOutput(Nexus.Core.Validators.IProcessorContext)">
            <summary>
            Format output for fields that do not have a Processor.
            </summary>
            <remarks>
            The default behavior is to pass through nulls and ICollection types 
            and to call ToString on everything else.
            </remarks>
            <param name="context">The IProcessorContext</param>
        </member>
        <member name="T:Nexus.Core.Validators.DateTimeProcessor">
            <summary>
            Convert and format DateTime fields.
            </summary>
        </member>
        <member name="T:Nexus.Core.Validators.EntryListProcessor">
            <summary>
            Transform IDictionary entries into formatted entries on a IEntryList instances.
            </summary>
            <remarks><p>
            To implement, override NewEntryList to provide an instances of the desired type. 
            This will usually be an IEntryList that creates the entry objects used by your application. 
            The entry objects can be conventional property objects, 
            or objects that expose properties backed by an IDictionary, as you prefer.
            </p></remarks>
            
        </member>
        <member name="M:Nexus.Core.Validators.EntryListProcessor.NewEntryList">
            <summary>
            Override to return an instance of the desired IEntryList type.
            </summary>
            <returns>An IEntryList instance</returns>
        </member>
        <member name="T:Nexus.Core.Validators.FormatOutput">
            <summary>
            Format related fields from the main context to Criteria, 
            adding an error message to Alerts if formatting fails.
            </summary>
        </member>
        <member name="T:Nexus.Core.Validators.IProcessorContext">
            <summary>
            Encapsulate values needed by standard IProcessorCommands [OVR-13].
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Validators.IProcessorContext.FieldKey">
            <summary>
            Identify the field under validation.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Validators.IProcessorContext.Source">
            <summary>
            Record the source value to process.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Validators.IProcessorContext.Target">
            <summary>
            Record the target value after conversion or formatting.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.Validators.IProcessorContext.Context">
            <summary>
            Identify the main IRequestContext being processed.
            </summary>
        </member>
        <member name="P:Nexus.Core.Validators.IProcessorContext.Criteria">
            <summary>
            Identify the set of input/output fields being processed.
            </summary>
        </member>
        <member name="P:Nexus.Core.Validators.IProcessorContext.FieldTable">
            <summary>
            Identify the FieldTable being utilized.
            </summary>
        </member>
        <member name="T:Nexus.Core.Validators.KeyValueProcessor">
            <summary>
            Process the value of a KeyValue list 
            by setting the Key property to the Field's ID.
            </summary>
        </member>
        <member name="T:Agility.Nexus.Validators.ProcessorContext">
            <summary>
            Implement IProcessorContext.
            </summary>
        </member>
        <member name="T:Nexus.Core.IEntryList">
            <summary>
            A list of a set of Fields, such as displayed as the result of a query.
            </summary>
        </member>
        <member name="M:Nexus.Core.IEntryList.Insert(System.String)">
            <summary>
            Create and Insert a new entry object at index 0.
            </summary>
        </member>
        <member name="M:Nexus.Core.IEntryList.AddEntry(System.Collections.IDictionary)">
            <summary>
            Add a entry object based on an IDictionary.
            </summary>
            <param name="row"></param>
        </member>
        <member name="T:Nexus.Core.IKeyValue">
            <summary>
            Represent a key/value pair, 
            as stored in an IDictionary or displayed 
            by a list in a user interface.
            </summary>
            <remarks>
            The Text method returns the string form of Value,
            which is useful for text-based controls.
            </remarks>
            
        </member>
        <member name="P:Nexus.Core.IKeyValue.Key">
            <summary>
            The Key property under which the Value is stored.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.IKeyValue.Value">
            <summary>
            The Value stored for the Key.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.IKeyValue.Text">
            <summary>
            The Value in its standard string format.
            </summary>
            
        </member>
        <member name="T:Nexus.Core.IKeyValueList">
            <summary>
            List KeyValue objects.
            </summary>
        </member>
        <member name="T:Nexus.Core.IRequestCatalog">
            <summary>
             Extend ICatalog to automatically set IFieldTable, 
             IMessageTable and provide convenience methods [OVR-8]. 
            </summary>
            
        </member>
        <member name="M:Nexus.Core.IRequestCatalog.GetObject(System.String)">
            <summary>
            Obtain an object for ID.
            </summary>
            <param name="name">Our object ID</param>
            <returns>object for name</returns>
        </member>
        <member name="M:Nexus.Core.IRequestCatalog.GetHelperFor(System.String)">
            <summary>
            Obtain a default IViewHelper instance, 
            configured for the specified command.
            </summary>
            <param name="command">The Command ID</param>
            <returns>Helper instance for command</returns>
        </member>
        <member name="M:Nexus.Core.IRequestCatalog.GetRequestCommand(System.String)">
            <summary>
            Obtain Command and verify that instance is a IRequestCommand.
            </summary>
            <param name="command">Command ID</param>
            <returns>IRequestCommand instance for name</returns>
            <exception cref="!:Exception">
            Throws Exception if name is null, 
            name is not in catalog, 
            or if instance for name is not a IRequestCommand
            </exception>
        </member>
        <member name="M:Nexus.Core.IRequestCatalog.GetRequestContext(System.String)">
            <summary>
            Obtain a IRequestContext for command ID, 
            including embedded resources like the FieldTable,
            </summary>
            <param name="name">Our command ID</param>
            <returns>IRequestContext with embedded resources.</returns>
            
        </member>
        <member name="M:Nexus.Core.IRequestCatalog.GetRequestContext(System.String,System.Collections.IDictionary)">
            <summary>
            Obtain a IRequestContext for command ID, 
            including embedded resources like the FieldTable,
            and process string-based input. 
            </summary>
            <param name="name">Our command ID</param>
            <param name="input">Our input values</param>
            <returns>IRequestContext with embedded resources.</returns>
            
        </member>
        <member name="M:Nexus.Core.IRequestCatalog.GetRequestContext(Nexus.Core.IRequestCommand)">
            <summary>
            Obtain a IRequestContext for the command, 
            including embedded resources.
            </summary>
            <param name="command">Our command</param>
            <returns>IRequestContext with embedded resources.</returns>
            
        </member>
        <member name="M:Nexus.Core.IRequestCatalog.ExecuteRequest(System.String)">
            <summary>
            Obtain and execute a IRequestContext.
            </summary>
            <param name="name">Our command ID</param>
            <returns>Context after execution</returns>
            
        </member>
        <member name="M:Nexus.Core.IRequestCatalog.ExecuteRequest(Nexus.Core.IRequestContext)">
            <summary>
            Execute a IRequestContext.
            </summary>
            <param name="context">Context to execute</param>
            
        </member>
        <member name="M:Nexus.Core.IRequestCatalog.ExecuteView(Nexus.Core.IRequestContext)">
            <summary>
            Execute a IRequestContext as part of a chain 
            created with the PreOp and PostOp commands (if any).
            </summary>
            <remarks><p>
            Among other things, the PreOp/PostOp chain may transfer 
            data between the Criteria and the root Context.
            </p><p>
            The PreOp/PostOp chain acts as a Front Controller 
            in that it ensures certain tasks are perform 
            upon every request. 
            </p><p>
            IViewHelper implementations are expected to 
            call ExecuteView to "invoke the Helper's command".
            </p></remarks>
            <param name="context">Context to execute</param>
            
        </member>
        <member name="P:Nexus.Core.IRequestCatalog.FieldTable">
            <summary>
            Provide the FieldTable for this Catalog.
            </summary>
            <remarks><p>
            The GetRequest methods "stamp" the Context 
            with a reference to the FieldTable, 
            among other things.
            </p></remarks>
        </member>
        <member name="P:Nexus.Core.IRequestCatalog.PreOp">
            <summary>
            Execute before a Command called via ExecuteView. 
            </summary>
            <remarks><p>
            Of course, a IRequestChain may be used here too.
            </p></remarks>
            
        </member>
        <member name="P:Nexus.Core.IRequestCatalog.PostOp">
            <summary>
            Execute after a Command called via ExecuteView. 
            </summary>
            <remarks><p>
            Of course, a IRequestChain may be used here too.
            </p></remarks>
            
        </member>
        <member name="P:Nexus.Core.IRequestCatalog.ViewHelper">
            <summary>
            Default IViewHelper instance for this Catalog.
            </summary>
            <remarks><p>
            Set in catalogs for applications that use ViewHelpers.
            The object should be a non-singleton instance ("protype").
            Used by GetHelperFor.
            </p></remarks>
            
        </member>
        <member name="T:Nexus.Core.IRequestChain">
            <summary>
            Composite IChain and IRequestCommand.
            </summary>
        </member>
        <member name="T:Nexus.Core.IRequestContext">
            <summary>
            Exchange data between business and presentation layers [OVR-7]. 
            </summary>
            <remarks><p>
            An IRequestContext can predefine whatever properties we need for 
            storing input, output, messages, and other common attributes, 
            including Locale (or Culture) and user credentials. 
            </p><p>
            A key member is the FieldTable. 
            The FieldTable uses XForms terminology for its members 
            and IRequestContext members follow suit. 
            For example, "errors" are called "Alerts" and generic 
            messages are called "Hints, 
            since these are terms used by the FieldTable and XForms.
            </p></remarks>
            
        </member>
        <member name="M:Nexus.Core.IRequestContext.HasCriteria">
            <summary>
            Indicate whether a Criteria is present.
            </summary>
            <returns>True if a Criteria is present.</returns>
        </member>
        <member name="M:Nexus.Core.IRequestContext.AddAlert(System.String)">
            <summary>
            Add an alert message under the "global" key.
            </summary>
            <param name="template">Message template.</param>
            
        </member>
        <member name="M:Nexus.Core.IRequestContext.AddAlert(System.String,System.String)">
            <summary>
            Add an alert message, creating the context if needed. 
            </summary>
            <remarks>
            Multiple messages can be added for a key and retrieved as a List.
            </remarks>
            <param name="template">Message template.</param>
            <param name="message">Message key.</param>
        </member>
        <member name="M:Nexus.Core.IRequestContext.AddAlertForField(System.String)">
            <summary>
            Add a formatted "Alert" error message
            for the given field key via the FieldTable.
            </summary>
            <param name="key">Key from the FieldTable</param>
        </member>
        <member name="M:Nexus.Core.IRequestContext.AddAlertRequired(System.String)">
            <summary>
            Add a formatted "Required" error message
            for the given field key via the FieldTable.
            </summary>
            <param name="key">Key from the FieldTable</param>
        </member>
        <member name="M:Nexus.Core.IRequestContext.AddHint(System.String,System.String)">
            <summary>
            Add a hint, creating the context if needed.
            </summary>
            <remarks><p>
            Multiple hints can be added for a key and 
            retrieved as a List.
            </p></remarks>
            <param name="template">Message template.</param>
            <param name="message">Message key.</param>
            
        </member>
        <member name="M:Nexus.Core.IRequestContext.AddHint(System.String)">
            <summary>
            Add a hint under the "global" key.
            </summary>
            <param name="template">Message template.</param>
            
        </member>
        <member name="P:Nexus.Core.IRequestContext.Command">
            <summary>
            Identify the top-level Command (or Chain) processing 
            this Context.
            </summary>
            <remarks><P>
            The Command property corresponds to ID of INexusCommand 
            for the initial Command or Chain.
            </P></remarks>
            
        </member>
        <member name="P:Nexus.Core.IRequestContext.CommandBin">
            <summary>
            Provide the top-level Command (or Chain) processing this Context.
            </summary>
            <remarks><p>
            Command corresponds to ID of INexusCommand for the 
            initial Command or Chain.
            </p></remarks>
            
        </member>
        <member name="P:Nexus.Core.IRequestContext.FieldTable">
            <summary>
            Provide the FieldTable for this Context.
            </summary>
            <remarks><p>
            The default implementation uses the Catalog to inject the global 
            Field Table reference. 
            The Context, and members with access to a Context, 
            can use the FieldTable to validate and format values, 
            and even to create controls that display values.
            </p></remarks>
            
        </member>
        <member name="P:Nexus.Core.IRequestContext.Profile">
            <summary>
            User profile, which includes user ID and Locale.
            </summary>
        </member>
        <member name="P:Nexus.Core.IRequestContext.HasOutcome">
            <summary>
            Return true if an Outcome object is present.
            </summary>
            <returns>True if an Outcome context is present.</returns>
            
        </member>
        <member name="P:Nexus.Core.IRequestContext.Outcome">
            <summary>
            Return a IList stored under the Command ID, if any.
            </summary>
            <remarks><p>
            Some Commands returns List of values.
            So that Commands can work together as part of a Chain, 
            list-based Commands are expected to store the 
            list under their own Command ID.
            Outcome is a convenience method to access the 
            initial or "outermost" Command or Chain ID. 
            </p>
            <p>
            To allow use as subcommands in a Chain, 
            IRequestCommand implementations should prefer the idiom 
            <code>Context[ID] = object</code>
            to using the Outcome directly. 
            Since they might not be the initial Command,
            but rather a subcommand, or link, in a Chain.
            </p><p>
            Outcome is more convenient to presentation layer clients, 
            who are looking for the top-level output, 
            rather than output of a particular subcommand.
            </p><p>
            As mentioned, both Outcome and the context[ID] idiom 
            can be used by Command that return lists of values. 
            Commands that return a single set of fields 
            can store the result directly in the main Context. 
            This strategy allows one Command to obtain field values 
            to be used by another Command 
            (like piping output between Unix shell commands.)
            </p><p>
            Note that "Outcome" is an "alias" to an entry in 
            this context. 
            Unlike FieldState, Outcome is not a subcontext 
            in its own right. 
            </p></remarks>
            
        </member>
        <member name="P:Nexus.Core.IRequestContext.Criteria">
            <summary>
            Provide an optional subcontext containing input or output 
            values, usually expressed as display strings.
            </summary>
            <remarks>
            <p>
            Criteria is provided for Commands that accept input 
            from other components which may need to be validated, 
            converted, or formatted before use.
            If the proposed FieldState is accepted, 
            the entries may be merged into the root Context, 
            perhaps after type conversion or formatting tasks.
            If the proposed FieldState is not accepted, 
            the entries are not merged into the root Context, 
            and there should be Errors or a Fault explaining 
            why the FieldState (e.g input) cannot be accepted.
            </p>
            <p>
            In practice, it is expected, but not required, that 
            all the FieldState entries will contain string values.
            </p>
            <p>
            Commands should only act on the Criteria in order 
            to transfer values between the FieldState and the 
            root Context. 
            Conventional Commands will look to the root Context 
            for the state and make any expected changes 
            or additions directly to the root context.
            FieldState is not expected to be used by a Commands 
            unless input is being submitted from an untrusted or 
            naive component, or needs to be transformed for use 
            by a display component.
            </p>
            </remarks>
        </member>
        <member name="P:Nexus.Core.IRequestContext.Alerts">
            <summary>
            Record a list of alert (or error) messages, 
            keyed by the field causing the message, 
            or to a magic global key.
            </summary>
            <remark><p>
            TODO: Refactor as NameValueCollection ?
            </p></remark>
            
        </member>
        <member name="P:Nexus.Core.IRequestContext.HasAlerts">
            <summary>
            Indicate whether alerts exist.
            </summary>
            <returns>True if there are alerts.</returns>
            
        </member>
        <member name="P:Nexus.Core.IRequestContext.Fault">
            <summary>
            Record an Exception, if thrown.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.IRequestContext.HasFault">
            <summary>
            Indicate whether an Exception was caught.
            </summary>
            <returns>True if an Exception was caught.</returns>
            
        </member>
        <member name="P:Nexus.Core.IRequestContext.IsNominal">
            <summary>
            Indicate whether context is free of fault and alerts.
            </summary>
            <returns>True if there are no fault or alerts.</returns>
            
        </member>
        <member name="P:Nexus.Core.IRequestContext.Hints">
            <summary>
            Record hint (advisory or warning) messages (!errors), 
            keyed by the field causing the message, 
            or to a magic global key.
            </summary>
            
        </member>
        <member name="P:Nexus.Core.IRequestContext.HasHints">
            <summary>
            Indicate whether hints exist.
            </summary>
            <returns>True if there are hints.</returns>
            
        </member>
        <member name="T:Nexus.Core.KeyValue">
            <summary>
            Implement IKeyValue.
            </summary>
        </member>
        <member name="F:Nexus.Core.KeyValue.KEY">
            <summary>
            Expose name of "Key" field.
            </summary>
            <remarks><p>
            Use this field for the DataValueField (sic).
            </p></remarks>
        </member>
        <member name="F:Nexus.Core.KeyValue.VALUE">
            <summary>
            Expose name of "Value" field.
            </summary>
            <remarks><p>
            Use this field for the DataTextField (sic).
            </p></remarks>
        </member>
        <member name="T:Nexus.Core.KeyValueList">
            <summary>
            Implement IKeyValueList.
            </summary>
        </member>
        <member name="M:Nexus.Core.KeyValueList.#ctor">
            <summary>
            Construct instance without parameters.
            </summary>
        </member>
        <member name="P:Nexus.Core.KeyValueList.AddAll">
            <summary>
            Add members of given list to this list.
            </summary>
        </member>
        <member name="T:Nexus.Core.RequestChain">
            <summary>
            Implement IRequestChain.
            </summary>
        </member>
        <member name="T:Nexus.Core.RequestContext">
            <summary>
            Implement IRequestContext.
            </summary>
            
        </member>
        <member name="M:Nexus.Core.RequestContext.ToString">
            <summary>
            Express state as a key=value list.
            </summary>
            <returns>Formatted string representing state.</returns>
        </member>
        <member name="M:Nexus.Core.RequestContext.#ctor(System.String)">
            <summary>
            Convenience constructor to set Command on instantiation.
            </summary>
            <param name="command">Name of Command processing this Context.</param>
            
        </member>
        <member name="M:Nexus.Core.RequestContext.#ctor">
            <summary>
            Default, no argument constructor.
            </summary>
            
        </member>
        <member name="M:Nexus.Core.RequestContext.LazyCriteria">
            <summary>
            Instantiate Criteria, if needed.
            </summary>
        </member>
        <member name="M:Nexus.Core.RequestContext.AddStore(System.String,System.String,System.String)">
            <summary>
            Convenience method to lazily instantiate a message store.
            </summary>
            <param name="template">Message template to add to the queue.</param>
            <param name="queue">Token for queue of messages within the 
            store.</param>
            <param name="key">Token for message store.</param>
            
        </member>
        <member name="T:Nexus.Core.Tokens">
            <summary>
            Provide tokens representing context keys.
            </summary>
            <remarks><p>
            The common convention of using CAPITALS for constants 
            is not followed for properties because using the same 
            case as the Property simplifies the use of a simple 
            template to create new members.
            </p></remarks>
            
        </member>
        <member name="F:Nexus.Core.Tokens.Alert">
            <summary>
            Token for Alert property.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.Alerts">
            <summary>
            Token for Alerts property.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.Command">
            <summary>
            Token for Command property.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.CommandBin">
            <summary>
            Token for CommandBin property.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.ControlTypeName">
            <summary>
            Token for ControlTypeName ControlTypeName.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.Context">
            <summary>
            Token for Context property.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.Criteria">
            <summary>
            Token for Criteria property.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.Processor">
            <summary>
            Token for Processor property.
            </summary>
        </member>
        <member name="F:Nexus.Core.Tokens.DataFormat">
            <summary>
            Token for DataFormat DataFormat.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.DataType">
            <summary>
            Token for DataType DataType.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.DataTypeID">
            <summary>
            Token for DataTypeName DataTypeName.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.Fault">
            <summary>
            Token for Fault property.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.FieldKey">
            <summary>
            Token for FieldKey property.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.FieldTable">
            <summary>
            Token for FieldTable property.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.Field">
            <summary>
            Token for Field property.
            </summary>
        </member>
        <member name="F:Nexus.Core.Tokens.GenericMessage">
            <summary>
            Token for a generic message property.
            </summary>
            <remarks><p>
            A dot is used to communicate the idea 
            that the message catagory has no name
            and to avoid using a language constant 
            in a language-neutral content.
            </p></remarks>
            
        </member>
        <member name="F:Nexus.Core.Tokens.Hint">
            <summary>
            Token for Hint property.
            </summary>
        </member>
        <member name="F:Nexus.Core.Tokens.Hints">
            <summary>
            Token for Hints property.
            </summary>
        </member>
        <member name="F:Nexus.Core.Tokens.Help">
            <summary>
            Token for Help property.
            </summary>
        </member>
        <member name="F:Nexus.Core.Tokens.ID">
            <summary>
            Token for ID ID.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.Label">
            <summary>
            Token for Label property.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.Required">
            <summary>
            Token for Required property.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.Source">
            <summary>
            Token for Source property.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.Target">
            <summary>
            Token for Target property.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.ID_FIELD_TABLE">
            <summary>
            Token for FieldTable command element.
            </summary>
            
        </member>
        <member name="F:Nexus.Core.Tokens.CONTROL_INPUT">
            <summary>
            Token for input Control Type Name.
            </summary>
        </member>
        <member name="F:Nexus.Core.Tokens.HINT_EDIT">
            <summary>
             Token for Edit hint.
            </summary>
        </member>
        <member name="F:Nexus.Core.Tokens.HINT_SUCCESS_ADD">
            <summary>
             Token for Add Succeess hint.
            </summary>
        </member>
        <member name="F:Nexus.Core.Tokens.HINT_SUCCESS_EDIT">
            <summary>
             Token for Edit Success hint.
            </summary>
        </member>
        <member name="F:Nexus.Core.Tokens.HINT_SUCCESS_QUIT">
            <summary>
            Token for Quit Success hint.
            </summary>
        </member>
        <member name="F:Nexus.Core.Tokens.ENTRY_EDIT_COMMAND">
            <summary>
            Token for Entry Edit command.
            </summary>
        </member>
        <member name="F:Nexus.Core.Tokens.ENTRY_QUIT_COMMAND">
            <summary>
            Token for Entry Quit command.
            </summary>
        </member>
        <member name="F:Nexus.Core.Tokens.ENTRY_SAVE_COMMAND">
            <summary>
            Token for Entry Save command.
            </summary>
        </member>
        <member name="F:Nexus.Core.Tokens.ENTRY_ITEM_COMMAND">
            <summary>
            Token for Entry Item command.
            </summary>
        </member>
        <member name="F:Nexus.Core.Tokens.ENTRY_ITEM_COMMAND_NAME">
            <summary>
            Token for Entry Item command name.
            </summary>
        </member>
        <member name="T:Nexus.Core.EntryDictionary">
            <summary>
            Expose field attributes as public properties.
            </summary>
            <remarks><p>
            The EntryDictionary is used for integration with libraries that 
            can use only public properties, such as DataGrid. 
            It is also used to pass properties as Event argument, 
            in which case it is used like a data transfer object.
            </p><p>
            The values are available both as an IDictionary and 
            (optionally) as Properties. 
            (The properties should use the IDictionary for storage.)
            To define properties, extend EntryDictionary.
            </p></remarks>
        </member>
        <member name="M:Nexus.Core.EntryDictionary.ToString">
            <summary>
            Provide a string representation of the field values 
            in the format "key=value\n".
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:Nexus.Core.EntryDictionary.CacheText">
            <summary>
            Call calculated properties so that 
            they are cached as entries in the table.
            </summary>
            <remarks>
            <p>Override to provide functionality</p>
            </remarks>
            
        </member>
    </members>
</doc>
